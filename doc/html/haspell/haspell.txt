-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simple text-to-speech engine
--   
--   Please see README.md
@package haspell
@version 0.1.0.0

module HspInterpreter
data LangRule
MkLangRule :: String -> [Phone] -> LangRule
[token] :: LangRule -> String
[phones] :: LangRule -> [Phone]
type Phone = String

-- | List of langRules found in .hsp file of language with given ID
langRules :: String -> IO [LangRule]

-- | Helper method used to turn contents of .hsp file into langrules
strToLangRule :: String -> LangRule

-- | Just like embedded <a>lines</a> method, but omitting empty lines
lines' :: String -> [String]

-- | Splitting String into a list based on a regex
splitStr :: String -> String -> [String]

-- | Filters all spaces out of a given String
despace :: String -> String

-- | Sorts a list langRules according to length of their tokens firstly and
--   alphabetically secondarily
sortLangRules :: [LangRule] -> [LangRule]

-- | Sorts a list of langRules alphabetically according to their tokens
sortAlph :: [LangRule] -> [LangRule]
data Alias
MkAlias :: String -> [Phone] -> Alias
[alias] :: Alias -> String
[matches] :: Alias -> [Phone]

-- | Makes an alias out of a String from .hsp file
strToAlias :: String -> Alias

-- | List of aliases from given language (.hsp file)
aliases :: String -> IO [Alias]
data AliasRule
MkAliasRule :: [Phone] -> [Phone] -> AliasRule
[regex] :: AliasRule -> [Phone]
[output] :: AliasRule -> [Phone]

-- | List of aliasRules from given language (.hsp file)
aliasRulesAliased :: String -> IO [AliasRule]

-- | Makes an aliasRule out of a String from .hsp file
strToAliasRule :: String -> AliasRule

-- | Generates a list of aliasRules from the given unaliased aliasRule:
--   example:
--   
--   <pre>
--   unAliasRule [{alias="vovel"}, matches=["a,e,i,o,u,y"]] {regex=[<a>vovel</a>,"i"], output=["$0","j"]} 
--   
--   would produce:
--   
--   [{regex=["a","i"], output=["a","j"]},
--   
--   {regex=["e","i"], output=["e","j"]},
--   
--   {regex=["i","i"], output=["i","j"]},
--   
--   {regex=["o","i"], output=["o","j"]},
--   
--   {regex=["u","i"], output=["u","j"]},
--   
--   {regex=["y","i"], output=["y","j"]}]
--   </pre>
unAliasRule :: [Alias] -> AliasRule -> [AliasRule]

-- | Returns a list of unaliased rules from given language (.hsp file)
aliasRules :: String -> IO [AliasRule]

-- | Sorts a list of aliasRules according to length of regex
sortAliasRules :: [AliasRule] -> [AliasRule]

-- | Replaces all of occurences of an element of a list with a list of
--   other elements
replaceOccurences :: Eq a => a -> [a] -> [a] -> [a]
instance GHC.Classes.Eq HspInterpreter.AliasRule
instance GHC.Show.Show HspInterpreter.AliasRule
instance GHC.Classes.Eq HspInterpreter.Alias
instance GHC.Show.Show HspInterpreter.Alias
instance GHC.Classes.Eq HspInterpreter.LangRule
instance GHC.Show.Show HspInterpreter.LangRule

module Phonemizer

-- | Given the ID of language and a String returns a list of "words" -
--   lists of phones
phonemize :: String -> String -> IO [[Phone]]

-- | Given a String and a list of LangRules returns the LangRule whose
--   token is the same as the beginning of the String
matchLangRule :: String -> [LangRule] -> LangRule

-- | Modifies the list of phones based on AliasRules
considerAliases :: [AliasRule] -> [Phone] -> [Phone]

-- | Given a word (a list of phones) and a list of AliasRules returns the
--   AliasRule whose regex is the same as the beginning of the word
matchAliasRule :: [Phone] -> [AliasRule] -> Maybe AliasRule

module Soundgluer

-- | Extension of audio files representing phonems.
waveExtension :: FilePath

-- | Probably a naive reimplementation of some builtin.
pathSeparator :: FilePath

-- | Name of the root languages directory.
langsDirectory :: FilePath

-- | Name of the folder containing standard phonems (like silence), which
--   appear accross all languages.
stdLang :: FilePath

-- | Path of the wave header used during generation of the output.
waveHeaderPath :: FilePath

-- | Converts a list of phonemized words in some language into an audio
--   representation and writes it to a file.
glueSpeech :: String -> [[Phone]] -> String -> IO ()

-- | Loads lazily phonems of a given language into memory.
loadLangAudio :: String -> IO (Map Phone Builder)

-- | Checks using extension if file has the WAV format.
isWave :: FilePath -> Bool

-- | Extracts the phone name from a file name.
phoneName :: FilePath -> String

-- | Returns path to the directory of a specified language.
getLangPath :: String -> FilePath

-- | Loads into memory raw audio data without header from a single wave
--   file and returns a Builder of a lazy ByteString.
getAudioData :: FilePath -> FilePath -> IO Builder

-- | Utility for generating a wave file containing only a header and no
--   audio data.
generateHeader :: IO ()
